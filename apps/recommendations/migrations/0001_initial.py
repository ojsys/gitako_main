# Generated by Django 5.2 on 2025-06-22 18:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('farms', '0002_cropcalendar_croprotationplan_plannedcropallocation_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('crop_selection', 'Crop Selection'), ('planting_timing', 'Planting Timing'), ('weather_based', 'Weather Based'), ('pest_disease', 'Pest & Disease'), ('resource_optimization', 'Resource Optimization'), ('market_timing', 'Market Timing'), ('fertilizer', 'Fertilizer Application'), ('irrigation', 'Irrigation Schedule')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('action_required', models.TextField(blank=True)),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='medium', max_length=10)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('algorithm_used', models.CharField(blank=True, max_length=100)),
                ('data_points_used', models.IntegerField(default=0)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_implemented', models.BooleanField(default=False)),
                ('feedback_rating', models.IntegerField(blank=True, help_text='1-5 star rating from user', null=True)),
                ('feedback_notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('crop', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.crop')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to='farms.farm')),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.farmsection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usefulness_rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('accuracy_rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('implementation_difficulty', models.CharField(choices=[('easy', 'Easy'), ('moderate', 'Moderate'), ('difficult', 'Difficult')], max_length=10)),
                ('was_implemented', models.BooleanField()),
                ('outcome_description', models.TextField(blank=True)),
                ('actual_results', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('would_recommend_to_others', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='recommendations.recommendationengine')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceOptimization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('water', 'Water/Irrigation'), ('fertilizer', 'Fertilizer'), ('seeds', 'Seeds'), ('labor', 'Labor'), ('equipment', 'Equipment'), ('energy', 'Energy')], max_length=20)),
                ('current_usage_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('current_usage_unit', models.CharField(max_length=20)),
                ('current_cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('recommended_usage_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('potential_savings', models.DecimalField(decimal_places=2, max_digits=12)),
                ('efficiency_improvement_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('optimization_method', models.TextField()),
                ('implementation_timeline', models.CharField(max_length=100)),
                ('required_investment', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('payback_period_days', models.IntegerField(blank=True, null=True)),
                ('environmental_benefit', models.TextField(blank=True)),
                ('sustainability_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=10)),
                ('crop', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.crop')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farms.farm')),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.farmsection')),
            ],
            options={
                'ordering': ['-potential_savings'],
            },
        ),
        migrations.CreateModel(
            name='WeatherRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weather_condition', models.CharField(max_length=50)),
                ('temperature_range', models.CharField(blank=True, max_length=20)),
                ('humidity_level', models.CharField(blank=True, max_length=20)),
                ('precipitation_forecast', models.CharField(blank=True, max_length=50)),
                ('irrigation_advice', models.TextField(blank=True)),
                ('pest_risk_alert', models.TextField(blank=True)),
                ('harvest_timing_advice', models.TextField(blank=True)),
                ('field_work_recommendations', models.TextField(blank=True)),
                ('weather_data_source', models.CharField(default='OpenWeatherMap', max_length=100)),
                ('forecast_accuracy', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farms.farm')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CropRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(max_length=20)),
                ('suitability_score', models.DecimalField(decimal_places=2, help_text='0-100 suitability score', max_digits=5)),
                ('profit_potential', models.DecimalField(decimal_places=2, help_text='Estimated profit per hectare', max_digits=12)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk')], default='medium', max_length=10)),
                ('soil_compatibility', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('climate_compatibility', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('water_requirement_match', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('market_demand_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('price_trend_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('competition_level', models.CharField(choices=[('low', 'Low Competition'), ('medium', 'Medium Competition'), ('high', 'High Competition')], default='medium', max_length=10)),
                ('optimal_planting_start', models.DateField(blank=True, null=True)),
                ('optimal_planting_end', models.DateField(blank=True, null=True)),
                ('expected_harvest_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='medium', max_length=10)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farms.farm')),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.farmsection')),
                ('recommended_crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farms.crop')),
            ],
            options={
                'ordering': ['-suitability_score'],
                'unique_together': {('farm', 'field', 'recommended_crop', 'season')},
            },
        ),
        migrations.CreateModel(
            name='MarketPricePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(default='Local Market', max_length=100)),
                ('current_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('predicted_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_unit', models.CharField(default='per kg', max_length=20)),
                ('prediction_date', models.DateField()),
                ('prediction_horizon_days', models.IntegerField(default=30)),
                ('supply_demand_ratio', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('seasonal_factor', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('weather_impact_factor', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('recommended_action', models.CharField(choices=[('hold', 'Hold/Wait'), ('sell_now', 'Sell Now'), ('sell_later', 'Sell Later'), ('store', 'Store for Better Price')], max_length=20)),
                ('optimal_selling_date', models.DateField(blank=True, null=True)),
                ('prediction_model', models.CharField(default='price_forecast_v1', max_length=50)),
                ('confidence_interval', models.CharField(blank=True, max_length=20)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farms.crop')),
            ],
            options={
                'ordering': ['-prediction_date'],
                'unique_together': {('crop', 'region', 'prediction_date')},
            },
        ),
        migrations.CreateModel(
            name='PestDiseaseAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pest_or_disease_name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('pest', 'Pest'), ('disease', 'Disease'), ('weed', 'Weed')], max_length=10)),
                ('severity_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical')], max_length=10)),
                ('risk_factors', models.JSONField(default=list, help_text='List of contributing risk factors')),
                ('probability_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('expected_impact', models.TextField()),
                ('recommended_actions', models.TextField()),
                ('treatment_options', models.JSONField(default=list)),
                ('prevention_measures', models.TextField(blank=True)),
                ('monitoring_schedule', models.TextField(blank=True)),
                ('alert_date', models.DateTimeField(auto_now_add=True)),
                ('expected_onset_date', models.DateField(blank=True, null=True)),
                ('prediction_model', models.CharField(default='pest_disease_v1', max_length=50)),
                ('confidence_score', models.DecimalField(decimal_places=4, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('crop', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.crop')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farms.farm')),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farms.farmsection')),
            ],
            options={
                'ordering': ['-alert_date'],
                'indexes': [models.Index(fields=['farm', 'severity_level'], name='recommendat_farm_id_ed9e4e_idx'), models.Index(fields=['crop', 'type'], name='recommendat_crop_id_fec51d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='recommendationengine',
            index=models.Index(fields=['farm', 'recommendation_type'], name='recommendat_farm_id_a0786a_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationengine',
            index=models.Index(fields=['created_at', 'is_active'], name='recommendat_created_e97456_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationengine',
            index=models.Index(fields=['priority', 'confidence_level'], name='recommendat_priorit_02d147_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendationfeedback',
            unique_together={('recommendation', 'user')},
        ),
    ]
